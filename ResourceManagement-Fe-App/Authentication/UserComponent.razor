@using Microsoft.Extensions.Options;
@using ResourceManagement_Fe_App.Helpers;
@inject IJSRuntime jsr
@inject HttpClient Http
@inject IAuthenticationHelperWriter authHelper;
@inject IOptions<ServerOptions> serverOptions;
<p>
	@if (string.IsNullOrEmpty(username))
	{
		<EditForm Model="user" OnValidSubmit="OnValid" style="max-width:500px;">
			<DataAnnotationsValidator />
			<ValidationSummary />
			<div class="mb-2">
				<InputText class="form-control" @bind-Value="user.email" placeholder="Enter Email"></InputText>
			</div>
			<div class="mb-2">
				<InputText type="password" class="form-control" @bind-Value="user.password" placeholder="Enter Password"></InputText>
			</div>
			<div class="mb-2 text-right">
				<button class="btn btn-secondary" disabled="@isDisabled">login</button>
			</div>
		</EditForm>
	}
	else
	{
		<span>Hello, @username <a href="/logout">(Logout)</a></span>
	}
</p>

@code {

	string username = string.Empty;
	[Parameter]
	public EventCallback OnLoginSucces { get; set; }


	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			var userdata = await jsr.InvokeAsync<string>("localStorage.getItem", "user").ConfigureAwait(false);
			if (!string.IsNullOrWhiteSpace(userdata))
			{
				username = userdata.Split(';', 2)[0];
			}
		}
		await base.OnAfterRenderAsync(firstRender);
	}


	LoginModel user = new LoginModel();
	string message = string.Empty;
	bool isDisabled = false;

	private async Task OnValid()
	{
		isDisabled = true;
		using (var msg = await Http.PostAsJsonAsync<LoginModel>($"{serverOptions.Value.BaseUrl}auth/login", user, System.Threading.CancellationToken.None))
		{
			if (msg.IsSuccessStatusCode)
			{
				LoginResult result = await msg.Content.ReadFromJsonAsync<LoginResult>();
				message = result.message;
				isDisabled = false;

				if (result.success)
				{
					await authHelper.SetLocalAsync(result.email, result.jwtBearer);
					await OnLoginSucces.InvokeAsync();
				}
			}
		}
	}
}