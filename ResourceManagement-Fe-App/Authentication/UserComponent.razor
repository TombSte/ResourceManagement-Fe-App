@using Microsoft.Extensions.Options;
@using ResourceManagement_Fe_App.Helpers;
@inject IJSRuntime jsr
@inject HttpClient Http
@inject IAuthenticationHelperWriter authHelper;
@inject IOptions<ServerOptions> serverOptions;


<div class="unauthorized-layout">
	<Card Bordered="false" Title=@("Benvenuto!") Style="width: 300px">
		<Body>
			<Form Model="user" style="max-width:500px;" LabelColSpan="8"
				  WrapperColSpan="24">
				<DataAnnotationsValidator />
				<ValidationSummary />
				<FormItem>
					<Input class="form-control" @bind-Value="user.email" placeholder="Enter Email"></Input>
				</FormItem>
				<FormItem>
					<Input type="password" class="form-control" @bind-Value="user.password" placeholder="Enter Password"></Input>
				</FormItem>
				<FormItem>
					<Button class="btn btn-secondary" Disabled="@isDisabled" OnClick="OnValid">login</Button>
				</FormItem>
			</Form>
		</Body>
	</Card>
</div>
@code {

	string username = string.Empty;
	[Parameter]
	public EventCallback OnLoginSucces { get; set; }

	EmbeddedProperty Property(int span, int offset) => new() { Span = span, Offset = offset };

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			var userdata = await jsr.InvokeAsync<string>("localStorage.getItem", "user").ConfigureAwait(false);
			if (!string.IsNullOrWhiteSpace(userdata))
			{
				username = userdata.Split(';', 2)[0];
			}
		}
		await base.OnAfterRenderAsync(firstRender);
	}


	LoginModel user = new LoginModel();
	string message = string.Empty;
	bool isDisabled = false;

	private async Task OnValid()
	{
		isDisabled = true;
		using (var msg = await Http.PostAsJsonAsync<LoginModel>($"{serverOptions.Value.BaseUrl}auth/login", user, System.Threading.CancellationToken.None))
		{
			if (msg.IsSuccessStatusCode)
			{
				LoginResult result = await msg.Content.ReadFromJsonAsync<LoginResult>();
				message = result.message;
				isDisabled = false;

				if (result.success)
				{
					await authHelper.SetLocalAsync(result.email, result.jwtBearer);
					await OnLoginSucces.InvokeAsync();
				}
			}
		}
	}
}