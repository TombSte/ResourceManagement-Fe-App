@using ResourceManagement_Fe_App.Data.Transactions;
@inject TransactionApiClient apiClient;
@using System.Collections.Generic;
<h3>Modifica Categorie</h3>
@if(isLoading){
    <SpinnerPanel Height="500px" />
}
else{
    <Table DataSource="categories"
           TItem="Category"
           RowClassName="@(_=>"editable-row")"
           Bordered
           ScrollY="500">
        <ChildContent Context="data">
            <Column TData="string" Title="Nome">
                @if (!editCache[data.Id].edit)
                {
                    @data.Name
                }
                else
                {
                    <Input @bind-Value="editCache[data.Id].data.Name" />
                }
            </Column>
            <ActionColumn Title="Azioni" Width="200" Align="ColumnAlign.Right">
                        @if (!editCache[data.Id].edit)
                        {
                            <Button OnClick="() => startEdit(data.Id)">Modifica</Button>
                        }
                        else
                        {
                    <Button Type="@ButtonType.Primary" OnClick="() => saveEdit(data.Id)" class="save">Applica</Button>
                        }
            </ActionColumn>
        </ChildContent>
    </Table>

    <Button Type="@ButtonType.Primary" OnClick="async () => await apiClient.UpdateCategoriesAsync(this.categories)">Salva</Button>
}

@code {
    List<Category> categories = new List<Category>();
    private bool isLoading = false;
    private async Task UpdateCategories()
    {
        isLoading = true;
        StateHasChanged();
        var result = await apiClient.GetCategoriesAsync();
        this.categories = result.ToList();
        categories.ForEach(item =>
        {
            editCache[item.Id] = (false, item);
        });
        isLoading = false;
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await UpdateCategories();
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    IDictionary<int, (bool edit, Category data)> editCache = new Dictionary<int, (bool edit, Category data)>();

    void startEdit(int id)
    {
        var data = editCache[id];
        editCache[id] = (true, data.data with { }); // add a copy in cache
    }

    void cancelEdit(int id)
    {
        var data = categories.FirstOrDefault(item => item.Id == id);
        editCache[id] = (false, data); // recovery
    }

    void saveEdit(int id)
    {
        var index = categories.FindIndex(item => item.Id == id);
        categories[index] = editCache[id].data; // apply the copy to data source
        editCache[id] = (false, categories[index]); // don't affect rows in editing
    }
}
