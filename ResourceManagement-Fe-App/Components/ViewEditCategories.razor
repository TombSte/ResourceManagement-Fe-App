@using ResourceManagement_Fe_App.Data.Transactions;
@inject TransactionApiClient apiClient;
@using System.Collections.Generic;
<h3>ViewEditCategories</h3>

<Table 
    DataSource="categories" 
    TItem="Category" 
    RowClassName="@(_=>"editable-row")" 
    Bordered 
    TableLayout="fixed"
    ScrollY="500">
    <ChildContent Context="data">
        <Column TData="string" Title="Name">
            @if (!editCache[data.Id].edit)
            {
                @data.Name
            }
            else
            {
                <Input @bind-Value="editCache[data.Id].data.Name" />
            }
        </Column>
        <ActionColumn Title="Action">
            <GridRow Justify="end">
            <GridCol>
                    @if (!editCache[data.Id].edit)
                    {
                        <Button OnClick="() => startEdit(data.Id)">Edit</Button>
                    }
                    else
                    {
                        <Button OnClick="() => saveEdit(data.Id)" class="save">Save</Button>
                    }
            </GridCol>
        </GridRow>
            
        </ActionColumn>
    </ChildContent>
</Table>

@code {
    List<Category> categories = new List<Category>();

    private async Task UpdateCategories()
    {
        var result = await apiClient.GetCategoriesAsync();
        this.categories = result.ToList();
        categories.ForEach(item =>
        {
            editCache[item.Id] = (false, item);
        });
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await UpdateCategories();
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    IDictionary<int, (bool edit, Category data)> editCache = new Dictionary<int, (bool edit, Category data)>();

    int i = 0;
    string editId;

    void startEdit(int id)
    {
        var data = editCache[id];
        editCache[id] = (true, data.data with { }); // add a copy in cache
    }

    void cancelEdit(int id)
    {
        var data = categories.FirstOrDefault(item => item.Id == id);
        editCache[id] = (false, data); // recovery
    }

    void saveEdit(int id)
    {
        var index = categories.FindIndex(item => item.Id == id);
        categories[index] = editCache[id].data; // apply the copy to data source
        editCache[id] = (false, categories[index]); // don't affect rows in editing
    }
}
