@using ResourceManagement_Fe_App.Components.Data;
@using ResourceManagement_Fe_App.Data.Forms;
@using System.Text.Json;
@using ResourceManagement_Fe_App.Data;
@using ResourceManagement_Fe_App.Data.Transactions;
@using ResourceManagement_Fe_App.Helpers.Clients;
@inject TransactionApiClient apiClient;

<Form @ref="form"
      Layout="@FormLayout.Vertical"
      LabelCol="fieldColSpan"
      WrapperCol="valueColSpan"
      Model="@DefaultValue"
      OnFinish="OnFinish" 
      OnFinishFailed="OnFinishFailed">

    <FormItem Label="Titolo">
        <Input Style="width:100%;" @bind-Value="@context.Title" />
    </FormItem>

    <FormItem Label="Importo">
        <Input Type="number" Style="width:100%;" @bind-Value="@context.Amount" />
    </FormItem>

    <FormItem Label="Data">
        <DatePicker Style="width:100%;" TValue="DateTime?" Picker="@DatePickerType.Date" @bind-Value="@context.TransactionDate" />
    </FormItem>

    <FormItem Label="Tipologia">
        <Select                 
                DataSource="@typeItems"
                @bind-Value="DefaultValue.Type"
                LabelName="@nameof(TransactionFormType.Name)"
                ValueName="@nameof(TransactionFormType.Type)"
                Placeholder="Seleziona una tipologia"
                DefaultActiveFirstOption="true"
                EnableSearch>
                Seleziona
        </Select>
    </FormItem>
    @*OnSelectedItemChanged="@(item => OnSelectedCategoryChangedHandler(item))"*@
    <FormItem Label="Categoria">
        <Select DataSource="@categories"
                @bind-Value="DefaultValue.CategoryId"
                LabelName="@nameof(Category.Name)"
                ValueName="@nameof(Category.Id)"
                Placeholder="Seleziona una categoria"
                DefaultActiveFirstOption="true"
                EnableSearch
                OnSelectedItemChanged="async (Category value) => await OnSelectedCategoryChangedHandler(value)">
            Seleziona
        </Select>

        <Row Style="margin-top: 10px">
            <Button Type="@ButtonType.Primary" Icon="@IconType.Outline.Plus" OnClick="() => newCategoriIsOpen = true">Aggiungi</Button>
        </Row>
        
    </FormItem>
    
    <FormItem Label="Categoria Secondaria">
        <Select DataSource="@secondCategories"
                @bind-Value="DefaultValue.SecondaryCategoryId"
                LabelName="@nameof(SecondaryCategory.Name)"
                ValueName="@nameof(SecondaryCategory.Id)"
                Placeholder="Seleziona una categoria secondaria"
                DefaultActiveFirstOption="false"
                OnSelectedItemChanged="async (SecondaryCategory value) => await OnSelectedSecondaryCategoryChangedHandler(value)">
            >

                EnableSearch>
            Seleziona
        </Select>

        <Row Style="margin-top: 10px">
            <Button Type="@ButtonType.Primary" Icon="@IconType.Outline.Plus" OnClick="() => newSecondaryCategoriIsOpen = true">Aggiungi</Button>
        </Row>
    </FormItem>
</Form>


@*Add category modal*@
<Modal 
    DestroyOnClose=true
    Title="Nuova Categoria"
    Width="400"
    Centered="true"
    OnCancel="() => newCategoriIsOpen = false"
    Visible=@newCategoriIsOpen
    OnOk="async () => {
        newCategoriIsOpen = false;
        await CreateCategory(newCategory);
        await UpdateCategories();
    }"
    >
    <p>
        <Text>Nome</Text>
        <Input Style="width:100%;" @bind-Value="@newCategory" />
    </p>

</Modal>

@*Add secondary category modal*@
<Modal DestroyOnClose=true
       Title="Nuova Categoria Secondaria"
       Width="400"
       Centered="true"
       OnCancel="() => newSecondaryCategoriIsOpen = false"
       Visible=@newSecondaryCategoriIsOpen
       OnOk="async () => {
        await CreateSecondaryCategory(newSecondaryCategory);
        newSecondaryCategoriIsOpen = false;
        await UpdateSecondaryCategories();
    }">
    <p>
        <Row Style="margin-bottom: 10px">
            <Text>Categoria associata</Text>
            <SimpleSelect Style="width:100%;" OnSelectedItemChanged="OnSelectedCategoryToCreateSecondaryChangedHandler">
                <SelectOptions>
                    @foreach (var item in categories)
                    {
                        <SimpleSelectOption Value=@item.Id.ToString() Label=@item.Name></SimpleSelectOption>
                    }
                </SelectOptions>
            </SimpleSelect>
        </Row>
        
        <Row Style="margin-bottom: 10px">
            <Text>Nome</Text>
            <Input Style="width:100%;" @bind-Value="@newSecondaryCategory" />
        </Row>
        
    </p>

</Modal>


@code {

    [Parameter]
    public FormMode FormMode { get; set; }

    [Parameter]
    public TransactionFormData DefaultValue { get; set; } = new();


    Form<TransactionFormData> form;
    ColLayoutParam fieldColSpan = new ColLayoutParam { Span = "24" };
    ColLayoutParam valueColSpan = new ColLayoutParam { Span = "24" };
    ColLayoutParam commandsColSpan = new ColLayoutParam { Span = "24" };

    bool newCategoriIsOpen = false;
    bool newSecondaryCategoriIsOpen = false;
    string newCategory = "";
    int categoryToCreateSecondary = 0;
    string newSecondaryCategory = "";

    IEnumerable<Category> categories = new List<Category>();
    IEnumerable<SecondaryCategory> secondCategories = new List<SecondaryCategory>();

    IEnumerable<TransactionFormType> typeItems = new List<TransactionFormType>()
    {
        new()
        {
            Type = TransactionType.Outgoing,
            Name = "Uscita",
        },
        new()
        {
            Type = TransactionType.Incoming,
            Name = "Entrata"
        }
    };

    protected override void OnParametersSet()
    {
        

        base.OnParametersSet();
    }

    private void OnFinish(EditContext editContext)
    {
        Console.WriteLine($"Success:{JsonSerializer.Serialize(DefaultValue)}");
    }

    private void OnFinishFailed(EditContext editContext)
    {
        Console.WriteLine($"Failed:{JsonSerializer.Serialize(DefaultValue)}");
    }

    private void OnSelectedTypeChangedHandler(TransactionFormType value)
    {
        DefaultValue.Type = value.Type;
    }

    private async Task UpdateCategories()
    {
        var result = await apiClient.GetCategoriesAsync();
        this.categories = result;
    }
    private async Task UpdateSecondaryCategories()
    {
        this.secondCategories = new List<SecondaryCategory>();
        var result = await apiClient.GetSecondaryCategoriesAsync(DefaultValue.CategoryId);
        this.secondCategories = result;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await UpdateCategories();
            await UpdateSecondaryCategories();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task OnSelectedCategoryChangedHandler(Category value)
    {
        DefaultValue.CategoryId = value.Id;
        this.DefaultValue.SecondaryCategoryId = null;
        await UpdateSecondaryCategories();
        
    }

    private async Task OnSelectedSecondaryCategoryChangedHandler(SecondaryCategory value)
    {
        DefaultValue.SecondaryCategoryId = value.Id;
    }


    private async Task OnSelectedCategoryToCreateSecondaryChangedHandler(string value)
    {
        this.categoryToCreateSecondary = Convert.ToInt32(value);
    }

    private async Task CreateCategory(string categoryName)
    {
        await apiClient.AddCategory(new AddCategory()
            {
                Name = categoryName
            });
    }

    private async Task CreateSecondaryCategory(string secondaryCategoryName)
    {
        await apiClient.AddSecondaryCategory(new AddSecondaryCategory()
            {
                CategoryId = this.categoryToCreateSecondary,
                Name = secondaryCategoryName
            });
    }

    class TransactionFormType
    {
        public TransactionType Type { get; set; }
        public string Name { get; set; }

        public static string PrintType(TransactionType type)
        {
            switch (type)
            {
                case TransactionType.Incoming:
                    return "Uscita"; break;
                case TransactionType.Outgoing:
                    return "Entrata"; break;
            }
            return "";
        }
        public static TransactionType GetType(string type)
        {
            switch (type)
            {
                case "Uscita":
                    return TransactionType.Outgoing; break;
                case "Entrata":
                    return TransactionType.Incoming; break;
            }
            return TransactionType.Outgoing;
        }
    }


}
